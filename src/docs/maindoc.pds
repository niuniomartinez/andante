#andante.anId
This function can be used to create a packed 32 bit integer from 8 bit characters.  These can be used for various things, like custom datafile objects or system IDs. Example:
@longcode(#
var
  osTypeLinux: LongWord;
begin
  osTypeLinux := anId ('TUX ')
end;
#)
#andante.anNoError
No error state.
#andante.anNoMemoryError
Can't allocate memory space to perform the operation.
#andante.anNotImplemented
System was not implemented for the current platform.
#andante.anError
Some Andante functions or procedure will assign an error number.  Read this function to retrieve the last error number.

All Andante error numbers are negative, so you can use positive values for your custom error states.

Note that Andante will not reset this value by itself (except on initialization) so you should reset it (i.e. set it to @code(0)) before to call a function or procedure that uses this variable.
#andante.anExitProc
Defines a method used to finalize a subsystem.
@seealso(anAddExitProc)
#andante.anInstall
Initializes the Andante system. No other routines can be called before this (with a few exceptions).
@returns(@true if Andante was successfully initialized, @false if Andante cannot be used.)
@seealso(anUninstall)
#andante.anUninstall
Closes the Andante system.

In most cases you don't need to call this, because it's called automatically when the program finalizes.
@seealso(anInstall)
#andante.anAddExitProc
Adds a procedure to the list that need to be called on Andante shutdown.

This is used internally by the different subsystems.  In most cases you don't need to use it.
@returns(@false if it cannot register the procedure.)
@seealso(anRemoveExitProc) @seealso(anError)
#andante.anRemoveExitProc
Removes the procedure from the @italic(exit list).
@seealso(anAddExitProc)
